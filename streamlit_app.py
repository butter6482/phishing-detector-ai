import streamlit as st
import os
import joblib
import requests
from openai import OpenAI
from dotenv import load_dotenv
from textos import textos

# Selecci√≥n de idioma
idioma = st.selectbox("üåê Selecciona idioma / Select language", ["Espa√±ol", "English"])
t = textos[idioma]

# Cargar variables de entorno
load_dotenv()
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# Cargar modelo local y vectorizador
model = joblib.load("modelo_entrenado.pkl")
vectorizer = joblib.load("vectorizer.pkl")

# Palabras clave sospechosas
palabras_clave = {
    "Espa√±ol": [
        "verifica", "urgente", "cuenta suspendida", "haz clic", "contrase√±a",
        "seguro social", "actualiza", "informaci√≥n bancaria", "inicia sesi√≥n", "confirmar"
    ],
    "English": [
        "verify", "urgent", "account suspended", "click here", "password",
        "social security", "update", "bank information", "log in", "confirm"
    ]
}

# Funci√≥n para verificar URLs con Google Safe Browsing
def verificar_urls_con_google(texto):
    api_key = os.getenv("GOOGLE_SAFE_BROWSING_KEY")
    url_api = f"https://safebrowsing.googleapis.com/v4/threatMatches:find?key={api_key}"
    urls_encontradas = [word for word in texto.split() if word.startswith("http")]
    urls_maliciosas = []

    for url in urls_encontradas:
        body = {
            "client": {"clientId": "phishing-detector", "clientVersion": "1.0"},
            "threatInfo": {
                "threatTypes": ["MALWARE", "SOCIAL_ENGINEERING", "UNWANTED_SOFTWARE", "POTENTIALLY_HARMFUL_APPLICATION"],
                "platformTypes": ["ANY_PLATFORM"],
                "threatEntryTypes": ["URL"],
                "threatEntries": [{"url": url}]
            }
        }
        response = requests.post(url_api, json=body)
        if response.json().get("matches"):
            urls_maliciosas.append(url)

    return urls_maliciosas

# Interfaz Streamlit
st.title(t["titulo"])
st.write(t["instruccion"])

# INPUT DEL USUARIO
user_input = st.text_area(t["mensaje"])

# Solo se ejecuta si se aprieta el bot√≥n
if st.button(t["boton"]):
    if user_input.strip() == "":
        st.warning(t["advertencia_vacio"])
    else:
        # 1. Clasificaci√≥n con modelo local
        input_vector = vectorizer.transform([user_input])
        prediction = model.predict(input_vector)[0]
        proba = model.predict_proba(input_vector)[0]
        st.write(f'{t["confianza"]} {max(proba) * 100:.2f}%')

        # 2. Palabras clave encontradas
        encontradas = [p for p in palabras_clave[idioma] if p.lower() in user_input.lower()]
        st.markdown(t["palabras_clave"])
        st.info(", ".join(encontradas) if encontradas else t["no_claves"])

        # 3. Preparar prompts para OpenAI
        if idioma == "Espa√±ol":
            prompt = f"""Analiza el siguiente mensaje cuidadosamente. ¬øEs un mensaje de phishing o es leg√≠timo? Justifica tu an√°lisis sin asumir que es falso solo por precauci√≥n. Considera el lenguaje, los enlaces, el tono, el remitente y el contenido del mensaje:\n\n{user_input}"""
            system_prompt = """Eres un experto en an√°lisis de correos electr√≥nicos. Tu tarea es determinar si un mensaje es phishing o leg√≠timo, bas√°ndote en pruebas concretas. S√© neutral y no marques como phishing a menos que haya se√±ales claras. Si no est√°s seguro, ind√≠calo y sugiere c√≥mo verificar el mensaje de forma segura."""
        else:
            prompt = f"""Carefully analyze the following message. Is it a phishing message or is it legitimate? Justify your analysis without assuming it's fake just out of caution. Consider the language, links, tone, sender, and content of the message:\n\n{user_input}"""
            system_prompt = """You are an expert in email analysis. Your task is to determine whether a message is phishing or legitimate based on concrete evidence. Be neutral and do not label something as phishing unless there are clear signs. If you're unsure, state that and suggest how to safely verify the message."""

        # 4. Explicaci√≥n extendida con OpenAI
        try:
            st.markdown(t["explicacion_ia"])
            with st.spinner("Consultando IA..."):
                response = client.chat.completions.create(
                    model="gpt-4o",
                    messages=[
                        {"role": "system", "content": system_prompt},
                        {"role": "user", "content": prompt}
                    ],
                    temperature=0.4
                )
                explanation = response.choices[0].message.content

                # Mostrar mensaje final basado en la explicaci√≥n de IA
                explanation_lower = explanation.lower()
                if any(frase in explanation_lower for frase in [
                    # Espa√±ol
                    "es un intento de phishing",
                    "hay m√∫ltiples se√±ales claras de phishing",
                    "hay varias se√±ales de alerta",
                    "este mensaje es sospechoso",
                    "no es seguro hacer clic",
                    # Ingl√©s
                    "it is a phishing attempt",
                    "phishing attempt",
                    "strongly suggest it is phishing",
                    "highly likely that this message is a phishing attempt",
                    "this message is suspicious",
                    "this is suspicious",
                    "not safe to click"
                ]):
                    st.error("üö® El mensaje parece ser phishing o spam.")
                elif any(frase in explanation_lower for frase in [
                    # Espa√±ol
                    "no se puede confirmar que sea phishing",
                    "podr√≠a ser leg√≠timo",
                    "se recomienda precauci√≥n",
                    # Ingl√©s
                    "cannot be definitively confirmed",
                    "may be legitimate",
                    "exercise caution",
                    "could be legitimate",
                    "might be legitimate"
                ]):
                    st.warning("‚ö†Ô∏è El mensaje presenta se√±ales sospechosas, pero no se puede confirmar que sea phishing.")
                else:
                    st.success("‚úÖ El mensaje parece leg√≠timo.")

                st.success(t["explicacion_generada"])
                st.info(explanation)

        except Exception as e:
            st.warning(t["error_openai"])
            st.text(str(e))

        # 5. Verificaci√≥n de URLs maliciosas
        maliciosas = verificar_urls_con_google(user_input)
        st.markdown(t["verificacion_urls"])
        if maliciosas:
            st.error(f'{t["urls_maliciosas"]}\n\n{", ".join(maliciosas)}')
        else:
            st.info(t["urls_seguras"])
